// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.59.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:collection/collection.dart';

abstract class FlutterRustBridgeExample {
  Future<Uint8List> drawMandelbrot(
      {required Size imageSize,
      required Point zoomPoint,
      required double scale,
      required int numThreads,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDrawMandelbrotConstMeta;

  Future<String> passingComplexStructs({required TreeNode root, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPassingComplexStructsConstMeta;

  Future<BoxedPoint> returningStructsWithBoxedFields({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReturningStructsWithBoxedFieldsConstMeta;

  Future<int> offTopicMemoryTestInputArray(
      {required Uint8List input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestInputArrayConstMeta;

  Future<Uint8List> offTopicMemoryTestOutputZeroCopyBuffer(
      {required int len, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kOffTopicMemoryTestOutputZeroCopyBufferConstMeta;

  Future<Uint8List> offTopicMemoryTestOutputVecU8(
      {required int len, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputVecU8ConstMeta;

  Future<int> offTopicMemoryTestInputVecOfObject(
      {required List<Size> input, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kOffTopicMemoryTestInputVecOfObjectConstMeta;

  Future<List<Size>> offTopicMemoryTestOutputVecOfObject(
      {required int len, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kOffTopicMemoryTestOutputVecOfObjectConstMeta;

  Future<int> offTopicMemoryTestInputComplexStruct(
      {required TreeNode input, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kOffTopicMemoryTestInputComplexStructConstMeta;

  Future<TreeNode> offTopicMemoryTestOutputComplexStruct(
      {required int len, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kOffTopicMemoryTestOutputComplexStructConstMeta;

  Future<int> offTopicDeliberatelyReturnError({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOffTopicDeliberatelyReturnErrorConstMeta;

  Future<int> offTopicDeliberatelyPanic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOffTopicDeliberatelyPanicConstMeta;

  Future<String> generateAddressFromPrivateKey(
      {required String input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateAddressFromPrivateKeyConstMeta;

  Future<StringArray2> signMessageWithPrivateKey(
      {required String msg, required String privateKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMessageWithPrivateKeyConstMeta;

  Future<String> createMultisigParams(
      {required List<String> addresses,
      required int threshold,
      required int unlockDuration,
      required int startEpoch,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateMultisigParamsConstMeta;

  Future<String> multisigSendProposeParams(
      {required String to, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMultisigSendProposeParamsConstMeta;

  Future<String> multisigApproveParams({required int txnid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMultisigApproveParamsConstMeta;

  Future<String> messageCid(
      {required String from,
      required String to,
      required int nonce,
      required String value,
      required int method,
      required String params,
      required int gasLimit,
      required String gasFeeCap,
      required String gasPremium,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMessageCidConstMeta;
}

class StringArray2 extends NonGrowableListView<String> {
  static const arraySize = 2;
  StringArray2(List<String> inner)
      : assert(inner.length == arraySize),
        super(inner);
  StringArray2.unchecked(List<String> inner) : super(inner);
  StringArray2.init(String fill) : super(List<String>.filled(arraySize, fill));
}

class BoxedPoint {
  final Point point;

  BoxedPoint({
    required this.point,
  });
}

class Point {
  final double x;
  final double y;

  Point({
    required this.x,
    required this.y,
  });
}

class Size {
  final int width;
  final int height;

  Size({
    required this.width,
    required this.height,
  });
}

class TreeNode {
  final String name;
  final List<TreeNode> children;

  TreeNode({
    required this.name,
    required this.children,
  });
}
